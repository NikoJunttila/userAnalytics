// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: domains.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDomain = `-- name: CreateDomain :one
INSERT INTO domains (id, owner_id,name,url,total_visits,total_unique,total_time,created_at,updated_at)
VALUES ($1, $2, $3, $4, $5, $6,$7,$8,$9)
RETURNING id, owner_id, name, url, total_visits, total_unique, total_time, created_at, updated_at
`

type CreateDomainParams struct {
	ID          uuid.UUID
	OwnerID     uuid.UUID
	Name        string
	Url         string
	TotalVisits int32
	TotalUnique int32
	TotalTime   int32
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) CreateDomain(ctx context.Context, arg CreateDomainParams) (Domain, error) {
	row := q.db.QueryRowContext(ctx, createDomain,
		arg.ID,
		arg.OwnerID,
		arg.Name,
		arg.Url,
		arg.TotalVisits,
		arg.TotalUnique,
		arg.TotalTime,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Url,
		&i.TotalVisits,
		&i.TotalUnique,
		&i.TotalTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDomain = `-- name: GetDomain :one

Select id, owner_id, name, url, total_visits, total_unique, total_time, created_at, updated_at FROM domains WHERE id = $1
`

func (q *Queries) GetDomain(ctx context.Context, id uuid.UUID) (Domain, error) {
	row := q.db.QueryRowContext(ctx, getDomain, id)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Url,
		&i.TotalVisits,
		&i.TotalUnique,
		&i.TotalTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDomains = `-- name: GetDomains :many
SELECT id, owner_id, name, url, total_visits, total_unique, total_time, created_at, updated_at FROM domains
`

func (q *Queries) GetDomains(ctx context.Context) ([]Domain, error) {
	rows, err := q.db.QueryContext(ctx, getDomains)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Url,
			&i.TotalVisits,
			&i.TotalUnique,
			&i.TotalTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMonthStats = `-- name: GetMonthStats :one

SELECT
  COUNT(*) AS total_count,
  COUNT(CASE WHEN visitorstatus='new' THEN 1 END) AS new_visitor_count
FROM visits
WHERE domain = $1
  AND createdat >= CURRENT_DATE - INTERVAL '30 days'
`

type GetMonthStatsRow struct {
	TotalCount      int64
	NewVisitorCount int64
}

func (q *Queries) GetMonthStats(ctx context.Context, domain uuid.UUID) (GetMonthStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getMonthStats, domain)
	var i GetMonthStatsRow
	err := row.Scan(&i.TotalCount, &i.NewVisitorCount)
	return i, err
}

const getPrevMonthStats = `-- name: GetPrevMonthStats :one

SELECT
  COUNT(*) AS total_count,
  COUNT(CASE WHEN visitorstatus='new' THEN 1 END) AS new_visitor_count
FROM visits 
WHERE domain = $1
  AND createdat >= CURRENT_DATE - INTERVAL '60 days'
  AND createdat < CURRENT_DATE - INTERVAL '30 days'
`

type GetPrevMonthStatsRow struct {
	TotalCount      int64
	NewVisitorCount int64
}

func (q *Queries) GetPrevMonthStats(ctx context.Context, domain uuid.UUID) (GetPrevMonthStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getPrevMonthStats, domain)
	var i GetPrevMonthStatsRow
	err := row.Scan(&i.TotalCount, &i.NewVisitorCount)
	return i, err
}

const updateDomain = `-- name: UpdateDomain :exec

UPDATE domains
  set total_visits = total_visits + $2,
  total_unique =  total_unique + $3
WHERE id = $1
`

type UpdateDomainParams struct {
	ID          uuid.UUID
	TotalVisits int32
	TotalUnique int32
}

func (q *Queries) UpdateDomain(ctx context.Context, arg UpdateDomainParams) error {
	_, err := q.db.ExecContext(ctx, updateDomain, arg.ID, arg.TotalVisits, arg.TotalUnique)
	return err
}
